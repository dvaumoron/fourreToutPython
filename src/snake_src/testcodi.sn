
(importpy math)
(importpy random)

(importsn codi)

(class Memoize () (bloc
	(def __init__ (self func) (bloc
		(setattr self func func)
		(setattr self cache (dict))
		None
	))
	(def __call__ (self n) (bloc
		(:= cache (getattr self cache))
		(if (contains cache n)
			([] cache n)
			(bloc
				(:= res ((getattr self func) n))
				([]= cache n res)
				res
			)
		)
	))
	(def __str__ (self)
		(. "Memoize(func={}, cache={})" format (getattr self func) (getattr self cache))
	)
))

(def Memoize fact (n) (* n (fact (- n 1))))

([]= (getattr fact cache) 0 1)

(def fact_iter (n) (bloc
	(:= res 1)
	(for (i (range 2 (+ n 1)))
		(:= res (* res i))
	)
	res
))

(:= ci ((getattr codi CacheInit)))

(. (ci 0) set 0)

(. (ci 1) set 1)

(:= fib_cache (getattr ci cache))

(del ci)

(def fib (n) (+ (fib (- n 1)) (fib (- n 2))))

(:= fib ((getattr codi memoize) fib fib_cache))

(print "fact(10) =" (fact 10))

(print "fact_iter(5) =" (fact_iter 5))

(print "fact =" fact)

(print "Memoize =" Memoize)

(print "fib(10) =" (fib 10))

(print "fib =" fib)

(print "fib.cache =" (getattr fib cache))

(def (getattr codi print_call) tri_rapide (l)
	(if (< (len l) 2)
		l
		(bloc
			(:= l1 (list))
			(:= l2 (list))
			(:= it (iter l))
			(:= pivot (next it))
			(for (el it)
				(.
					(? (< el pivot)
						l1
						l2
					)
					append
					el
				)	
			)
			(:= res (list_lit))
			(. res extend (tri_rapide l1))
			(. res append pivot)
			(. res extend (tri_rapide l2))
			res
		)
	)
)

(:= l (list_lit 5 2 6 4 1 3))

(print "l =" l)

(print "tri_rapide(l) =" (tri_rapide l))

(print "l.sort()")

(. l sort)

(print "l =" l)

(:= def_accept (getattr codi def_accept))

(class IntVisitable (int)
	(def_accept int)
)

(class FloatVisitable (float)
	(def_accept float)
)

(class StringVisitable (str)
	(def_accept string)
)

(def_macro def_print_visit (node) (bloc
	(:= typename (getattr node identifier))
	(quote (def (unquote (NodeIdentifier (concat "visit_" typename))) (value)
		(print (unquote (NodeValue (concat typename " :"))) value)
	))
))

(class (getattr codi static_class) PrintVisitor () (bloc
	(def_print_visit int)
	(def_print_visit float)
	(def_print_visit string)
))

(. (IntVisitable 1) accept PrintVisitor)

(. (FloatVisitable 2.5) accept PrintVisitor)

(. (StringVisitable "abc") accept PrintVisitor)

(class TestDelegate () (bloc
	(def __init__ (self) (bloc
		(setattr self l (list_lit 1 2 3 4 5))
		(setattr self s "toto")
		None
	))
	(def __str__ (self) 
		(. "TD(l={}, s={})" format (getattr self l) (getattr self s))
	)
	((getattr codi def_delegate) l append 1)
	((getattr codi def_delegate_m) l index (1 2 3))
	((getattr codi def_delegate_v) s find)
))

(:= td (TestDelegate))

(print td)

(. td append 1)

(print (. td index 1))

(print (. td index 1 1))

(def test_ex (td)
	(try
		(print (. td index 1 1 4))
		(
			(ValueError ve (print ve))
			(Exception ex (print ex))
		)
		(print "titi\n")
	)
)

(test_ex td)

(print (. td find "o"))

(print (. td find "t" 1 2))

(print td)

(print (set_lit))

(print (set_lit 1 2 3))

(print (tuple_lit))

(print (tuple_lit (neg 1) 2 3))

(print (dict_lit))

(print (dict_lit (1 2) (3 4) (5 6)))

(setm (a b) (list_lit 1 2))

(++ b)

(print_sep)

(print_sep ",")

(print_sep "," a)

(print_sep "," a b)

(:= a (:= b 0))

(print a b)

(def read_second_line (path) 
	(with (f (open path)) (bloc
		(:= it (iter f))
		(next it)
		(next it)
	))
)

(print (read_second_line "codi.py"))

(print (concat))

(print (concat 1))

(print (concat 1 2))

(:= f (lambda args (/ ([] args 0) 2)))

(print (f 4))

(:= l (list_comp (+ i 1) i (range 3)))

(:= d (dict_comp ((+ i 1) (- i 1)) i (range 3)))

(:= s (set_comp (+ i 1) i (range 3)))

(print l)

(print d)

(print s)

(print (sum (gen (* i i) i (range 10))))

((getattr codi def_square_matrix) 3)

(:= m (SquareMatrix3 (list_lit 0 1 2 3 4 5 6 7 8)))

(print m)

(:= id3 (. SquareMatrix3 identity))

(print id3)

(print (+ m id3))

(print (- m id3))

(print (* 3 id3))

(print (* id3 5))

(:= cm (list_lit 1 2 3))

(:= cm2 (@ m cm))

(print cm2)

(:= exp (getattr math exp))

((getattr codi def_sigmoid) 3)

(print (sigmoid3 cm2))

((getattr codi def_perceptron) 3)

(:= p (Perceptron3 sigmoid3))

(. (getattr p inner) append id3)

(. (getattr p inner) append m)

(:= rand (. random Random))

(. (getattr p inner) append (. SquareMatrix3 generate (lambda () (. rand uniform -1 1))))

(print (p cm))

((getattr codi dataclass) Position line column)

(print (Position 1 2))